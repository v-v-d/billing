"""initial

Revision ID: 7dc385ef2e02
Revises: 
Create Date: 2022-08-07 23:13:08.053171

"""
import uuid
from datetime import datetime

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "7dc385ef2e02"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.execute("create schema content")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "transactions",
        sa.Column("created_at", sa.DateTime(timezone=False), default=sa.sql.func.now()),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=False),
            default=sa.sql.func.now(),
            onupdate=datetime.utcnow,
        ),
        sa.Column(
            "id", postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4
        ),
        sa.Column("ext_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("amount", sa.Numeric(precision=14, scale=3), nullable=False),
        sa.Column(
            "type", sa.Enum("PAYMENT", "REFUND", name="typeenum"), nullable=False
        ),
        sa.Column(
            "status",
            sa.Enum(
                "CREATED",
                "FAILED",
                "PENDING",
                "WAITING_FOR_CAPTURE",
                "SUCCEEDED",
                "CANCELED",
                name="statusenum",
            ),
            nullable=True,
        ),
        sa.Column(
            "payment_type",
            sa.Enum("CARD", "APAY", "GPAY", "QR", name="paymenttype"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("ext_id"),
        sa.UniqueConstraint("id", "type", name="_id_type_uc"),
        schema="content",
    )
    op.create_index(
        op.f("ix_content_transactions_payment_type"),
        "transactions",
        ["payment_type"],
        unique=False,
        schema="content",
    )
    op.create_index(
        op.f("ix_content_transactions_status"),
        "transactions",
        ["status"],
        unique=False,
        schema="content",
    )
    op.create_index(
        op.f("ix_content_transactions_type"),
        "transactions",
        ["type"],
        unique=False,
        schema="content",
    )
    op.create_index(
        op.f("ix_content_transactions_user_id"),
        "transactions",
        ["user_id"],
        unique=False,
        schema="content",
    )
    op.create_check_constraint(
        "ck_transaction_amount_gt0",
        "transactions",
        sa.column("amount") > 0,
        schema="content",
    )

    op.create_table(
        "receipts",
        sa.Column("created_at", sa.DateTime(timezone=False), default=sa.sql.func.now()),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=False),
            default=sa.sql.func.now(),
            onupdate=datetime.utcnow,
        ),
        sa.Column(
            "id", postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4
        ),
        sa.Column("ext_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("transaction_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "CREATED",
                "FAILED",
                "PENDING",
                "SUCCEEDED",
                "CANCELED",
                name="statusenum",
            ),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["transaction_id"], ["content.transactions.id"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="content",
    )
    op.create_index(
        op.f("ix_content_receipts_ext_id"),
        "receipts",
        ["ext_id"],
        unique=False,
        schema="content",
    )
    op.create_index(
        op.f("ix_content_receipts_status"),
        "receipts",
        ["status"],
        unique=False,
        schema="content",
    )

    op.create_table(
        "receipt_items",
        sa.Column("created_at", sa.DateTime(timezone=False), default=sa.sql.func.now()),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=False),
            default=sa.sql.func.now(),
            onupdate=datetime.utcnow,
        ),
        sa.Column(
            "id", postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4
        ),
        sa.Column("receipt_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("description", sa.String(length=4096), nullable=False),
        sa.Column("quantity", sa.Numeric(precision=14, scale=3), nullable=False),
        sa.Column("amount", sa.Numeric(precision=14, scale=3), nullable=False),
        sa.ForeignKeyConstraint(
            ["receipt_id"], ["content.receipts.id"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="content",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("receipt_items", schema="content")
    op.drop_index(
        op.f("ix_content_receipts_status"), table_name="receipts", schema="content"
    )
    op.drop_index(
        op.f("ix_content_receipts_ext_id"), table_name="receipts", schema="content"
    )
    op.drop_table("receipts", schema="content")
    op.drop_index(
        op.f("ix_content_transactions_user_id"),
        table_name="transactions",
        schema="content",
    )
    op.drop_index(
        op.f("ix_content_transactions_type"),
        table_name="transactions",
        schema="content",
    )
    op.drop_index(
        op.f("ix_content_transactions_status"),
        table_name="transactions",
        schema="content",
    )
    op.drop_index(
        op.f("ix_content_transactions_payment_type"),
        table_name="transactions",
        schema="content",
    )
    op.drop_constraint(
        "ck_transaction_amount_gt0",
        table_name="transactions",
        type_="check",
        schema="content",
    )
    op.drop_table("transactions", schema="content")
    # ### end Alembic commands ###

    op.execute("drop schema content")
